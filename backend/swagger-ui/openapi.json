{
  "openapi": "3.0.1",
  "info": {
    "title": "Baustellenverwaltung",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://localhost:8080"
    }
  ],
  "tags": [
    {
      "name": "worktime",
      "description": "Zum Erfassen und Verwalten der Arbeitszeit"
    },
    {
      "name": "constructionSite",
      "description": "Baustellen"
    }
  ],
  "paths": {
    "/account/login": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Request login",
        "operationId": "login",
        "requestBody": {
          "description": "Email and Password of registered Account that requests to login",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid email provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Account"
      }
    },
    "/account/reset": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Request account reset",
        "operationId": "resetUser",
        "requestBody": {
          "description": "Email of registered Account that requests to reset his Login information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid email provided",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Account"
      }
    },
    "/account/password": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Update user password",
        "operationId": "updatePassword",
        "requestBody": {
          "description": "Object needs to contain new Password and resetId",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdatedPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Couldn't update Password",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Account"
      }
    },
    "/account/invite": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Invite a User",
        "operationId": "inviteUser",
        "requestBody": {
          "description": "Email of Person that you want to invite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation, returns invited User-Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email provided or user already invited",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Account"
      }
    },
    "/permission": {
      "get": {
        "tags": [
          "permission"
        ],
        "summary": "Returns roles with permissions",
        "description": "Returns a array that includes all available roles with permissions",
        "operationId": "getPermissions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type":"object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "permissions": {
                        "type":"object"
                      }
                    }
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Permission"
      }
    },
    "/notification": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Returns notifications",
        "description": "Returns a array that includes the last 7 notifications",
        "operationId": "getNotifications",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Notification"
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns all users",
        "description": "Returns a array of users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "User"
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add user",
        "operationId": "addUser",
        "requestBody": {
          "description": "ConstructionSite object that should be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid properties for Account Registration",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "User"
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns user specified by Id",
        "description": "Returns user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "number"
                      },
                      "address": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "invited"
                        ]
                      },
                      "role": {
                        "type": "string"
                      },
                      "permissions": {
                        "type": "object"
                      }
                    }
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "User"
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "User"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user by ID",
        "description": "Deletes user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "User"
      }
    },
    "/constructionSite": {
      "get": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Returns all construction sites",
        "description": "Returns a array of all construction sites",
        "operationId": "getConstructionSites",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConstructionSite"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      },
      "post": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Add constructionSite",
        "operationId": "addConstructionSite",
        "requestBody": {
          "description": "ConstructionSite object that should be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConstructionSite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConstructionSite"
                }
              }
            }
          },
          "400": {
            "description": "Invalid properties on ConstructionSite",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "ConstructionSite"
      }
    },
    "/constructionSite/{constructionSiteId}": {
      "get": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Returns construction site",
        "description": "Returns construction site",
        "operationId": "getConstructionSiteById",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConstructionSite"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      },
      "put": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Update constructionSite",
        "description": "Update Construction site",
        "operationId": "updateConstructionSite",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "ConstructionSite object that should be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConstructionSite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConstructionSite"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Construction site not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "ConstructionSite"
      },
      "delete": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Delete construction site by ID",
        "description": "Deletes construction Site",
        "operationId": "deleteConstructionSite",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Construction site not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      }
    },
    "/constructionSite/{constructionSiteId}/image": {
      "get": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Returns array with image paths",
        "description": "Returns a array that includes all image paths",
        "operationId": "getConstructionSiteImages",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSiteId",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type":"string"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      },
      "post": {
        "tags": [
          "constructionSite"
        ],
        "summary": "uploads an image",
        "operationId": "uploadImageToConstructionSite",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSiteId",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      }
    },
    "/task": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Returns all task for all construction sites",
        "description": "Returns a array of all tasks",
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Task"
      }
    },
    "/user/{userId}/task": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns all task for user",
        "description": "Returns a array of all tasks",
        "operationId": "getTasksByuserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Task"
      }
    },
    "/worktime": {
      "get": {
        "tags": [
          "worktime"
        ],
        "summary": "Returns booked worktime for all construction sites",
        "description": "Returns a array of booked worktime",
        "operationId": "getWorktime",
        "parameters": [
          {
            "name": "users",
            "in": "query",
            "description": "ID of users",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "array",
                "items": {
                  "type":"number"
                }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "ISO-String start Date",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "ISO-String end Date",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Worktime"
                  },
                  "x-content-type": "application/json"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "file"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Worktime"
      }
    },
    "/user/{userId}/worktime": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Returns booked worktime by user",
        "description": "Returns a array of booked worktime",
        "operationId": "getWorktimeByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "ISO-String start Date",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "ISO-String end Date",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Worktime"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Worktime"
      }
    },
    "/constructionSite/{constructionSiteId}/worker": {
      "post": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Add worker to constructionSite",
        "operationId": "addWorker",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Id of users that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
				        "minItems": 1,
				        "items": {
					        "type": "integer",
                  "example": "12, 32, 45"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid userId",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
		  "404": {
            "description": "UserId not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "ConstructionSite"
      }
    },
    "/constructionSite/{constructionSiteId}/worker{workerId}": {
      "delete": {
        "tags": [
          "constructionSite"
        ],
        "summary": "Remove worker from Construction site by ID",
        "description": "Removes worker from construction site",
        "operationId": "removeWorker",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "workerId",
            "in": "path",
            "description": "ID of user that should be removed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Worker not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "ConstructionSite"
      }
    },
    "/constructionSite/{constructionSiteId}/note": {
      "get": {
        "tags": [
          "note"
        ],
        "summary": "Returns all notes for specified construction sites",
        "description": "Returns a array of notes.",
        "operationId": "getConstructionSiteNotes",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Note"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Note"
      },
      "post": {
        "tags": [
          "note"
        ],
        "summary": "Add note to constructionSite",
        "operationId": "addNote",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Note object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid properties on Task",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Note"
      }
    },
    "/constructionSite/{constructionSiteId}/note{noteId}": {
      "put": {
        "tags": [
          "note"
        ],
        "summary": "Update note by ID",
        "description": "Update Note",
        "operationId": "updateNote",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "ID of note that should be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Note object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Note not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Note"
      },
      "delete": {
        "tags": [
          "note"
        ],
        "summary": "Delete note by ID",
        "description": "Deletes note from construction Site",
        "operationId": "deleteNote",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "ID of note that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Note not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Note"
      }
    },
    "/material": {
      "get": {
        "tags": [
          "material"
        ],
        "summary": "Returns all materials that have been saved",
        "description": "Returns a array of materials",
        "operationId": "getMaterials",
        "parameters": [{
          "name": "key",
          "in": "query",
          "description": "input to be filtered by",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      }
    },
    "/material/{materialName}": {
      "delete": {
        "tags": [
          "material"
        ],
        "summary": "Delete material from saved materials (Autocomplete)",
        "description": "delete saved material (Autocomplete)",
        "operationId": "removeMaterial",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      }
    },
    "/unit": {
      "get": {
        "tags": [
          "material"
        ],
        "summary": "Returns all units that have been saved",
        "description": "Returns a array of units",
        "operationId": "getUnits",
        "parameters": [{
          "name": "key",
          "in": "query",
          "description": "input to be filtered by",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      }
    },
    "/unit/{unitName}": {
      "delete": {
        "tags": [
          "material"
        ],
        "summary": "Delete unit from saved units (Autocomplete)",
        "description": "delete saved unit (Autocomplete)",
        "operationId": "removeUnit",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      }
    },
    "/constructionSite/{constructionSiteId}/material": {
      "get": {
        "tags": [
          "material"
        ],
        "summary": "Returns all materials for specified construction sites",
        "description": "Returns a array of materials. If content type 'text/csv' is selected a csv file will be returned",
        "operationId": "getConstructionSiteMaterials",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  },
                  "x-content-type": "application/json"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "file"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      },
      "post": {
        "tags": [
          "material"
        ],
        "summary": "Add material to constructionSite",
        "operationId": "addMaterial",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Task object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Material"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Invalid properties on Material",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Material"
      }
    },
    "/constructionSite/{constructionSiteId}/material/{materialId}": {
      "put": {
        "tags": [
          "material"
        ],
        "summary": "Update material by ID",
        "description": "Update Material",
        "operationId": "updateMaterial",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "materialId",
            "in": "path",
            "description": "ID of material that should be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Material object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Material"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Material not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Material"
      },
      "delete": {
        "tags": [
          "material"
        ],
        "summary": "Delete material by ID",
        "description": "Deletes material from construction Site",
        "operationId": "deleteMaterial",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "materialId",
            "in": "path",
            "description": "ID of material that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Material not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Material"
      }
    },
    "/constructionSite/{constructionSiteId}/task": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Returns all tasks for specified construction sites",
        "description": "Returns a array of tasks",
        "operationId": "getConstructionSiteTasks",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Task"
      },
      "post": {
        "tags": [
          "task"
        ],
        "summary": "Add task to constructionSite",
        "operationId": "addTask",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Task object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid properties on Task",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Task"
      }
    },
    "/constructionSite/{constructionSiteId}/task/{taskId}": {
      "put": {
        "tags": [
          "task"
        ],
        "summary": "Update task by ID",
        "description": "Update task",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task that should be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Task object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Task not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Task"
      },
      "delete": {
        "tags": [
          "task"
        ],
        "summary": "Delete task by ID",
        "description": "Deletes Task from construction Site",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Task not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Task"
      }
    },
    "/constructionSite/{constructionSiteId}/worktime": {
      "get": {
        "tags": [
          "worktime"
        ],
        "summary": "Returns booked worktime for specified construction sites",
        "description": "Returns a array of booked worktime",
        "operationId": "getConstructionSiteWorktime",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Worktime"
                  },
                  "x-content-type": "application/json"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "file"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Worktime"
      },
      "post": {
        "tags": [
          "worktime"
        ],
        "summary": "Book worktime for constructionSite",
        "operationId": "bookWorktime",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Worktime object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Worktime"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worktime"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Worktime"
      }
    },
    "/constructionSite/{constructionSiteId}/worktime/{worktimeId}": {
      "put": {
        "tags": [
          "worktime"
        ],
        "summary": "Update worktime by ID",
        "description": "Update booked worktime",
        "operationId": "updateWorktime",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "worktimeId",
            "in": "path",
            "description": "ID of the worktime that needs to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Worktime object that should be added to constructionSite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Worktime"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worktime"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Worktime not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-codegen-request-body-name": "body",
        "x-swagger-router-controller": "Worktime"
      },
      "delete": {
        "tags": [
          "worktime"
        ],
        "summary": "Delete worktime by ID",
        "description": "Deletes booked worktime",
        "operationId": "deleteWorktime",
        "parameters": [
          {
            "name": "constructionSiteId",
            "in": "path",
            "description": "ID of constructionSite",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "worktimeId",
            "in": "path",
            "description": "ID of the worktime that needs to be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameters",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Worktime not found",
            "content": {}
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-swagger-router-controller": "Worktime"
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "required": [
          "assignedTo",
          "priority",
          "status",
          "title",
          "constructionSiteId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Task_createdBy"
          },
          "modifiedAt": {
            "type": "string",
            "example": "{}"
          },
          "createdAt": {
            "type": "string",
            "example": "{}"
          },
          "constructionSiteId": {
            "type": "number",
            "example": 0
          },
          "priority": {
            "type": "string",
            "enum": [
              "high",
              "normal",
              "low"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "completed"
            ]
          },
          "assignedTo": {
            "$ref": "#/components/schemas/Task_createdBy"
          }
        },
        "example": {
          "createdAt": "{}",
          "title": "title",
          "createdBy": {
            "user": "name",
            "userId": "userId"
          },
          "modifiedAt": "{}",
          "id": 0,
          "text": "text",
          "priority": "high",
          "assignedTo": "{}",
          "status": "open"
        },
        "xml": {
          "name": "Task"
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "event type example: 'person_invited'"
          },
          "timestamp": {
            "type": "string",
            "example": "{}"
          }
        },
        "example": {
          "id": 0,
          "text": "text",
          "type": "type",
          "timestamp": "{}"
        },
        "xml": {
          "name": "Notification"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "phone": {
            "type": "number"
          },
          "address": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "invited"
            ]
          },
          "role": {
            "type": "string"
          }
        },
        "example": {
          "zip": "zip",
          "address": "address",
          "role": "role",
          "phone": 12345667,
          "city": "city",
          "name": "name",
          "language": "language",
          "id": 0,
          "email": "email",
          "status": "active"
        },
        "xml": {
          "name": "User"
        }
      },
      "Note": {
        "required": [
          "text",
          "title",
          "constructionSiteId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Task_createdBy"
          },
          "constructionSiteId": {
            "type": "number",
            "example": 0
          },
          "modifiedAt": {
            "type": "string"
          }
        },
        "example": {
          "title": "title",
          "createdBy": {
            "user": "name",
            "userId": "userId"
          },
          "modifiedAt": "modifiedAt",
          "id": 0,
          "text": "text"
        },
        "xml": {
          "name": "Note"
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "phone": {
            "type": "number"
          }
        },
        "example": {
          "zip": "zip",
          "address": "address",
          "city": "city",
          "phone": 6.027456183070403,
          "name": "name",
          "email": "email"
        },
        "xml": {
          "name": "Contact"
        }
      },
      "ConstructionSite": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Task_createdBy"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "name": {
            "type": "string",
            "example": "alpina Innenfarbe - weiss"
          },
          "modifiedAt": {
            "type": "string",
            "example": "{}"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "completed"
            ]
          }
        },
        "example": {
          "createdBy": {
            "user": "name",
            "userId": "userId"
          },
          "modifiedAt": "{}",
          "contact": {
            "zip": "zip",
            "address": "address",
            "city": "city",
            "phone": 6.027456183070403,
            "name": "name",
            "email": "email"
          },
          "name": "testbaustelle - 123",
          "id": 0,
          "status": "open",
          "users": [{
            "userId": 1,
            "workeremail": "test123@testmail.de",
            "workername": "yusuf abi"
          }]
        },
        "xml": {
          "name": "ConstructionSite"
        }
      },
      "Material": {
        "required": [
          "amount",
          "constructionSiteId",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Task_createdBy"
          },
          "constructionSiteId": {
            "type": "number",
            "description": "Id of constructionSite"
          },
          "modifiedAt": {
            "type": "string",
            "example": "{}"
          },
          "name": {
            "type": "string",
            "example": "alpina Innenfarbe - weiss"
          },
          "amount": {
            "type": "number",
            "example": 0
          },
          "unit": {
            "type": "string",
            "example": "mm²"
          }
        },
        "example": {
          "constructionSiteId": 0,
          "amount": 0,
          "unit": "mm²",
          "createdBy": {
            "user": "name",
            "userId": "userId"
          },
          "modifiedAt": "{}",
          "name": "alpina Innenfarbe - weiss",
          "id": 0
        },
        "xml": {
          "name": "Material"
        }
      },
      "Worktime": {
        "required": [
          "constructionSiteId",
          "end",
          "hours",
          "minutes",
          "start",
          "text"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Task_createdBy"
          },
          "constructionSiteId": {
            "type": "number",
            "example": 0
          },
          "hours": {
            "type": "number",
            "example": 0
          },
          "minutes": {
            "type": "number",
            "example": 0
          },
          "modifiedAt": {
            "type": "string",
            "example": "{}"
          },
          "start": {
            "type": "string",
            "example": "{}"
          },
          "text": {
            "type": "string",
            "example": "{}"
          },
          "end": {
            "type": "string",
            "example": "{}"
          }
        },
        "example": {
          "constructionSiteId": 0,
          "hours": 0,
          "createdBy": {
            "user": "name",
            "userId": "userId"
          },
          "minutes": 0,
          "modifiedAt": "{}",
          "start": "{}",
          "end": "{}",
          "text": "....",
          "id": 0
        },
        "xml": {
          "name": "Worktime"
        }
      },
      "AccountRegistration": {
        "required": [
          "address",
          "city",
          "email",
          "language",
          "name",
          "password",
          "verificationId",
          "zip"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "verificationId": {
            "type": "string"
          }
        },
        "xml": {
          "name": "AccountRegistration"
        }
      },
      "AccountUpdatedPassword": {
        "required": [
          "password",
          "resetId"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "resetId": {
            "type": "string"
          }
        },
        "xml": {
          "name": "AccountUpdatedPassword"
        }
      },
      "AccountInvite": {
        "required": [
          "email",
          "role",
          "name"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "example": {
          "name": "Kevin ...",
          "email": "kevin.test@....",
          "role": "admin"
        }
      },
      "AccountReset": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "xml": {
          "name": "AccountReset"
        }
      },
      "body": {
        "properties": {
          "additionalMetadata": {
            "type": "string",
            "description": "Additional data to pass to server"
          },
          "file": {
            "type": "string",
            "description": "file to upload",
            "format": "binary"
          }
        }
      },
      "Task_createdBy": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "name of user"
          },
          "userId": {
            "type": "string",
            "description": "userId reference"
          }
        },
        "example": {
          "name": "name",
          "userId": "userId"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}